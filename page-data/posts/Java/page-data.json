{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/Java",
    "result": {"pageContext":{"currentCategory":"Java","categories":["All","Java","Spring","Mybatis","Sourcetree"],"edges":[{"node":{"id":"cace616e-3fe9-5e36-aedc-9d2b5c719c27","excerpt":"파일 경로를 가져오는 경우 OS별로 파일 구분자가 다릅니다. OS에 맞게 각각 구현해도 되지만 비효율적이기 때문에 File.separator를 사용하여 구현한다면 이러한 문제를 해결할 수 있습니다. 실행을 한다면 각 운영체제에 맞게 파일 구분자가 출력되는 것을 확인할 수 있습니다. 다만 이렇게 한다면 경로가 늘어날 수록 코드도 길어지고 관리하기 어렵다는 단점이 있습니다. 이러한 경우를 개선한 Path를 소개하겠습니다. 간단하기 때문에 예시 코드를 보여드리겠습니다. 다음과 같이 결과는 같지만 코드가 상당히 줄어들어있는 것을 확인할 수 있습니다. 유지관리하는 측면에서도 가독성면에서도 상당히 이득이니 앞으로는 Path를 사용할 수 있도록 하는 것을 권장합니다. 지금까지 File.separator를 대체할 수 있는 Path에 대해서 간단하게 소개해봤습니다.","fields":{"slug":"/Java/Path/"},"frontmatter":{"categories":"Java","title":"[Java] 파일 구분자(File.separator) 대신 Path 사용하기","date":"January 30, 2022"}},"next":{"fields":{"slug":"/Java/start_gradle_project /start_gradle_project/"}},"previous":null},{"node":{"id":"906c8494-42cc-57e2-af35-e010f7823487","excerpt":"작성 환경 OS: Mac Monterey 사전 준비 Gradle 설치 Gralde 프로젝트 시작하기 1.프로젝트 시작 폴더 생성 Gradle 프로젝트를 생성하기 전에 해당 프로젝트를 시작할 폴더를 새로 만듭니다. 폴더 명과 별개로 프로젝트 이름은 따로 설정할 수 있습니다. 방법은 아래 말씀드리겠습니다. 파일을 만들었으면 해당 폴더로 이동합니다. 2.Gradle 프로젝트 생성 새롭게 생성한 폴더를 Gradle 프로젝트로 만드는데에는 몇 가지 요소를 선택해야합니다. stat_gradle_new_project 생성하고자 하는 프로젝트의 타입을 선택합니다. 저는 이번에 2, “application”을 선택하여 진행하겠습니다.  다음은 프로젝트의 언어를 선택합니다. 저는 이번에 “java”를 선택하겠습니다.  다음은 script DSL을 선택합니다. 저는 이번에 “groovy”를 선택하겠습니다.  다음은 테스트 프레임워크를 선택합니다. 선택할 수 있는 테스트 프레임워크는 여러개가 존재하지만…","fields":{"slug":"/Java/start_gradle_project /start_gradle_project/"},"frontmatter":{"categories":"Java","title":"[Gradle] Gradle project 시작하기","date":"January 28, 2022"}},"next":{"fields":{"slug":"/Spring/springboot_start-2-log4j2/"}},"previous":{"fields":{"slug":"/Java/Path/"}}},{"node":{"id":"fabe77db-03f6-5434-975c-9f8dfb2a8647","excerpt":"문자열을 거꾸로 뒤집는 방법은 여러 가지가 있지만 StringBuffer, reverse() 를 사용하는게 제일 간결하지 않을까싶습니다. StringBuffer, reverse() 예제 Code Result 설명 StringBuffer StringBuffer 클래스의 인스턴스는 String 클래스의 인스턴스와 다르게 그 값을 변경하거나 추가할 수 있는 가변 클래스입니다. new StringBuffer()로 새롭게 선언할 수 있습니다. StringBuffer.reverse() reverse() 메소드를 사용하면 해당 객체를 뒤집을 수 있습니다. reverse()를 사용하면 예제와 같이 sb와 reverseString의 문자열이 뒤집혀 있는 것을 확인할 수 있습니다. StringBuffer는 String를 사용하는 것보다 변경이 쉽다는 점에서 메모리 공간과 속도 측면에서 이득입니다. 다만 만능은 아니므로 적절한 상황에서 필요에 따라 사용하는 것이 좋아보입니다. StringBuffer,…","fields":{"slug":"/Java/string_reverse/"},"frontmatter":{"categories":"Java","title":"[Java] String 문자열 뒤집기","date":"January 01, 2022"}},"next":null,"previous":{"fields":{"slug":"/Git/sourcetree-mac_keychain_error/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}