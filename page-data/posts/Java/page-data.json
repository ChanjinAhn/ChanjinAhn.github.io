{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/Java","result":{"pageContext":{"currentCategory":"Java","categories":["All","Spring","Java","Mybatis","Sourcetree"],"edges":[{"node":{"id":"f80849e8-629c-5116-9f1e-52f619007ccb","excerpt":"이번 포스팅에서는 Gradle Project 에 Junit5 를 사용 환경을 설정합니다. 환경 종류 환경 OS M1 Mac(Monterey 12.4) IDE Intellij(2022.1.2) Gradle Project 에 JUnit5 라이브러리 추가 Gradle Junit5 Use Guide\n를 확인하여 손쉽게 JUnit5 를 적용할 수 있습니다. 직접적인 관련은 없지만 assertThat 을 사용하기 위해서 assertj 종속성도 같이 추가했습니다. build.gradle 종속성 추가 JUnit5 활성화 Gradle Spring 환경에서 junit5 라이브러리 추가 Gradle 과 동일하게 설정해도 무관하지만 Spring boot 에는 spring-boot-starter-test 가 존재하기 때문에 종속성을 다르게 가져갈 필요가 있습니다.\n사실 잘 살펴보면 jupiter 를 비롯한 여러 라이브러리를 포함하는 것을 확인할 수 있습니다. build.gradle 종속성 추가 JUnit…","fields":{"slug":"/Java/start_gradle_project/JUnit5/"},"frontmatter":{"categories":"Spring Java","title":"[Gradle] Gradle Project 에 JUnit5 + AssertThat 설정","date":"June 21, 2022"}},"next":{"fields":{"slug":"/Java/start_gradle_project/gradle_project_lombok/"}},"previous":null},{"node":{"id":"abdfe14f-66fc-54b1-b5c1-45385c43bd8b","excerpt":"환경 종류 환경 OS M1 Mac(Monterey 12.4) IDE Intellij(2022.1.2) Gradle Project 에 Lombok 적용하기 주로 라이브러리에 추가하는 통상적인 방법과 달리 Gralde Project는 라이브러리를 추가하지 않아도 plugin 으로 간단히 Lombok을 적용할 수 있습니다.\nlombok plugins guide 에 접속하여 버전과 적용 방법을 확인할 수 있습니다. bulid.gradle 에 lombok plugin 추가 라이브러리 추가 뿐만 아니라 annotation 설정을 해야하는 일반 gradle 환경과 달리 간단하게 적용할 수 있는 것이 가장 큰 장점입니다. IntelliJ 에 Lombok 설정하기 플러그인 목록에 Lombok 추가 최신 Intellij 는 기본 플러그인에 Lombok 이 포함되어 있으며 플러그인 활성화가 되어있습니다. 따라서 정상적으로 활성화 되어있는지 확인만 하면 됩니다. 먼저  를 차례로 클릭한 뒤 상단의  탭…","fields":{"slug":"/Java/start_gradle_project/gradle_project_lombok/"},"frontmatter":{"categories":"Java Spring","title":"[Java] gradle project lombok 설정","date":"June 20, 2022"}},"next":{"fields":{"slug":"/Java/start_gradle_project/lombok/"}},"previous":{"fields":{"slug":"/Java/start_gradle_project/JUnit5/"}}},{"node":{"id":"cd245c56-b4f5-5b1e-a951-8ddba072ab7a","excerpt":"환경 종류 환경 OS M1 Mac(Monterey 12.4) IDE Intellij(2022.1.2) Gradle Project 에 Lombok 적용하기 주로 라이브러리에 추가하는 통상적인 방법과 달리 Gralde Project는 라이브러리를 추가하지 않아도 plugin 으로 간단히 Lombok을 적용할 수 있습니다.\nlombok plugins guide 에 접속하여 버전과 적용 방법을 확인할 수 있습니다. bulid.gradle 에 lombok plugin 추가 라이브러리 추가 뿐만 아니라 annotation 설정을 해야하는 일반 gradle 환경과 달리 간단하게 적용할 수 있는 것이 가장 큰 장점입니다. IntelliJ 에 Lombok 설정하기 플러그인 목록에 Lombok 추가 최신 Intellij 는 기본 플러그인에 Lombok 이 포함되어 있으며 플러그인 활성화가 되어있습니다. 따라서 정상적으로 활성화 되어있는지 확인만 하면 됩니다. 먼저  를 차례로 클릭한 뒤 상단의  탭…","fields":{"slug":"/Java/start_gradle_project/lombok/"},"frontmatter":{"categories":"Java Spring","title":"[Java] gradle project lombok 설정","date":"June 20, 2022"}},"next":{"fields":{"slug":"/Java/Path/"}},"previous":{"fields":{"slug":"/Java/start_gradle_project/gradle_project_lombok/"}}},{"node":{"id":"cace616e-3fe9-5e36-aedc-9d2b5c719c27","excerpt":"파일 경로를 가져오는 경우 OS별로 파일 구분자가 다릅니다. OS에 맞게 각각 구현해도 되지만 비효율적이기 때문에 File.separator를 사용하여 구현한다면 이러한 문제를 해결할 수 있습니다. 실행을 한다면 각 운영체제에 맞게 파일 구분자가 출력되는 것을 확인할 수 있습니다. 다만 이렇게 한다면 경로가 늘어날 수록 코드도 길어지고 관리하기 어렵다는 단점이 있습니다. 이러한 경우를 개선한 Path를 소개하겠습니다. 간단하기 때문에 예시 코드를 보여드리겠습니다. 다음과 같이 결과는 같지만 코드가 상당히 줄어들어있는 것을 확인할 수 있습니다. 유지관리하는 측면에서도 가독성면에서도 상당히 이득이니 앞으로는 Path를 사용할 수 있도록 하는 것을 권장합니다. 지금까지 File.separator를 대체할 수 있는 Path에 대해서 간단하게 소개해봤습니다.","fields":{"slug":"/Java/Path/"},"frontmatter":{"categories":"Java","title":"[Java] 파일 구분자(File.separator) 대신 Path 사용하기","date":"January 30, 2022"}},"next":{"fields":{"slug":"/Java/start_gradle_project/gradle_start_project/"}},"previous":{"fields":{"slug":"/Java/start_gradle_project/lombok/"}}},{"node":{"id":"fe59af65-455b-57c1-bfd9-531d75bcf7c4","excerpt":"환경 종류 환경 OS M1 Mac(Monterey 12.4) IDE Intellij(2022.1.2) Gralde 프로젝트 시작하기 Gradle Install Hombrew Gradle Installation Documents Gradle 공식 문서에 따라 설치하도록 합니다. Hombrew 로 설치하는 것 역시 권장 방법이므로 터미널에 다음과 같이 입력 후 실행합니다. 1. 프로젝트 시작 폴더 생성 Gradle 프로젝트를 생성하기 전에 해당 프로젝트를 시작할 폴더를 새로 만듭니다. 폴더 명과 별개로 프로젝트 이름은 따로 지정할 수도 있습니다. 방법은 아래 말씀드리겠습니다. 2. Gradle 프로젝트 생성 폴더로 이동한 후에 아래 명령어를 입력합니다. 입력 후에는 몇 가지 옵션을 선택하여 프로젝트를 새로 생성합니다.  생성하고자 하는 프로젝트의 타입을 선택합니다. 저는 이번에 2, “application”을 선택하여 진행하겠습니다.  다음은 프로젝트의 언어를 선택합니다. 저는 “ja…","fields":{"slug":"/Java/start_gradle_project/gradle_start_project/"},"frontmatter":{"categories":"Java","title":"[Gradle] Gradle project 시작하기","date":"January 28, 2022"}},"next":{"fields":{"slug":"/Spring/springboot_start-3-undertow/"}},"previous":{"fields":{"slug":"/Java/Path/"}}},{"node":{"id":"fabe77db-03f6-5434-975c-9f8dfb2a8647","excerpt":"문자열을 거꾸로 뒤집는 방법은 여러 가지가 있지만 StringBuffer, reverse() 를 사용하는게 제일 간결하지 않을까싶습니다. StringBuffer, reverse() 예제 Code Result 설명 StringBuffer StringBuffer 클래스의 인스턴스는 String 클래스의 인스턴스와 다르게 그 값을 변경하거나 추가할 수 있는 가변 클래스입니다. new StringBuffer()로 새롭게 선언할 수 있습니다. StringBuffer.reverse() reverse() 메소드를 사용하면 해당 객체를 뒤집을 수 있습니다. reverse()를 사용하면 예제와 같이 sb와 reverseString의 문자열이 뒤집혀 있는 것을 확인할 수 있습니다. StringBuffer는 String를 사용하는 것보다 변경이 쉽다는 점에서 메모리 공간과 속도 측면에서 이득입니다. 다만 만능은 아니므로 적절한 상황에서 필요에 따라 사용하는 것이 좋아보입니다. StringBuffer,…","fields":{"slug":"/Java/string_reverse/"},"frontmatter":{"categories":"Java","title":"[Java] String 문자열 뒤집기","date":"January 01, 2022"}},"next":null,"previous":{"fields":{"slug":"/Git/sourcetree-mac_keychain_error/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}